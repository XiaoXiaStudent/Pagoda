<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.javaboy.pagoda.ordermaster.mapper.GoodsInfoMapper">

    <select id="getGoodBaseInfoList" resultType="org.javaboy.pagoda.ordermaster.vo.GoodInfoR">

        SELECT
        goods_code,
        goods_name,
        sales_unit,
        batch_quantity,
        supply_trend,
        import_flag,
        production_place,
        delivery_cycle,
        last_modified_by,
        last_modified_time,
        fruit_label,
        type,
        related_goods
        FROM pagoda_goods_info
        <where>
            <if test="goodsCodes!=null and !goodsCodes.isEmpty()">
                goods_code in
                <foreach item="goodsCode" collection="goodsCodes" open="(" separator="," close=")">
                    #{goodsCode}
                </foreach>
            </if>
        </where>


    </select>
    <select id="getPriceAndQuantity" resultType="org.javaboy.pagoda.ordermaster.vo.GoodInfoVO">
        SELECT goods_id as goodsCode, min_shelf_quantity as minShelfQuantity, distribution_price as price, COUNT(DISTINCT store_id) AS numStores
        FROM goods_store_info
        <where>
            <if test="goodsCode!=null and goodsCode !=''">
                goods_id =#{goodsCode}
            </if>
        </where>
        GROUP BY min_shelf_quantity, distribution_price, goods_id
        ORDER BY min_shelf_quantity, distribution_price;

    </select>

    <select id="findByGoodsCodes" resultType="org.javaboy.pagoda.ordermaster.entity.GoodsInfo">
        SELECT * FROM pagoda_goods_info WHERE goods_code IN
        <foreach item="goodsCode" index="index" collection="goodsCodes" open="(" separator="," close=")">
            #{goodsCode}
        </foreach>
    </select>
    <select id="distributeSendGoofInfos" resultType="org.javaboy.pagoda.ordermaster.vo.DistributeSendR">

        SELECT psi.store_code   AS storeCode,
               psi.store_name   AS storeName,
               pgi.goods_code   AS goodsCode,
               pgi.goods_name   AS goodsName,
               SUM(oi.quantity) AS quantity
        FROM orders o
                 LEFT JOIN order_items oi ON o.order_id = oi.order_id
                 LEFT JOIN pagoda_goods_info pgi ON oi.goods_code = pgi.goods_code
                 LEFT JOIN pagoda_store_info psi ON o.store_code = psi.store_code
        WHERE o.created_at > CURDATE()
        GROUP BY psi.store_code, pgi.goods_code;


    </select>

</mapper>
